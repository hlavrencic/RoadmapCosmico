{"version":3,"sources":["funcs/buildRandomTree.ts","components/basicGraph.tsx","funcs/buildColoredTree.ts","funcs/onNodeClick.ts","components/coloredGraph.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["buildRandomTree","length","nodes","Array","keys","map","i","id","name","links","filter","source","target","Math","round","random","BasicGraph","props","graphData","nodeAutoColorBy","linkDirectionalArrowLength","linkDirectionalArrowRelPos","linkCurvature","data","buildColoredTree","setNodeColorByLikes","node","likes","color","onNodeClick","event","ColoredGraph","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAYeA,EAZS,SAACC,GACrB,MAAO,CACHC,MAAO,YAAIC,MAAMF,GAAQG,QAAQC,KAAI,SAAAC,GAAC,MAAK,CAAEC,GAAID,EAAGE,KAAM,QAAUF,MACpEG,MAAO,YAAIN,MAAMF,GAAQG,QACxBM,QAAO,SAAAH,GAAE,OAAIA,KACbF,KAAI,SAAAE,GAAE,MAAK,CACZI,OAAQJ,EACRK,OAAQC,KAAKC,MAAMD,KAAKE,UAAYR,EAAG,U,QCMhCS,EAVI,SAACC,GAChB,OAAO,cAAC,IAAD,CACHC,UAAWlB,EAAgBiB,EAAMhB,QACjCkB,gBAAgB,QAChBC,2BAA4B,IAC5BC,2BAA4B,EAC5BC,cAAe,OCRjBC,EAAO,CACT,MAAS,CACL,CACE,GAAM,MACN,KAAQ,QACR,IAAO,EACP,MAAS,EACT,MAAS,QAEX,CACE,GAAM,MACN,KAAQ,QACR,IAAO,EACP,MAAS,EACT,MAAS,SAGf,MAAS,CACL,CACI,OAAU,MACV,OAAU,MACV,UAAa,KASVC,EAJU,WACrB,OAAOD,GCpBLE,EAAsB,SAACC,GACtBA,EAAKC,MAAQ,GAAK,GAAKD,EAAKC,MAC3BD,EAAKE,MAAQ,OACRF,EAAKC,MAAQ,GAAK,GAAKD,EAAKC,MACjCD,EAAKE,MAAQ,OACRF,EAAKC,MAAQ,IAClBD,EAAKE,MAAQ,SAGNC,EAhBK,SAACH,EAAWI,GAE5BJ,EAAKC,QAELF,EAAoBC,ICMTK,EAPM,SAACd,GAClB,OAAO,cAAC,IAAD,CACHC,UAAWM,IACXK,YAAaA,KCQNG,MAVf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CAAYhC,OAAQ,KACpB,cAAC,EAAD,QCISiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.deb4158b.chunk.js","sourcesContent":["const buildRandomTree = (length: number) => {\n    return {\n        nodes: [...Array(length).keys()].map(i => ({ id: i, name: 'Nodo ' + i })),\n        links: [...Array(length).keys()]\n        .filter(id => id)\n        .map(id => ({\n        source: id,\n        target: Math.round(Math.random() * (id-1))\n        }))\n    };\n}\n\nexport default buildRandomTree;","import { ForceGraph2D } from \"react-force-graph\";\nimport buildRandomTree from \"../funcs/buildRandomTree\";\n\nconst BasicGraph = (props: any) => {\n    return <ForceGraph2D \n        graphData={buildRandomTree(props.length)}\n        nodeAutoColorBy=\"group\"\n        linkDirectionalArrowLength={3.5}\n        linkDirectionalArrowRelPos={1}\n        linkCurvature={0.25}\n  />\n}\n\nexport default BasicGraph;","\nconst data = {\n    \"nodes\": [ \n        { \n          \"id\": \"id1\",\n          \"name\": \"name1\",\n          \"val\": 1,\n          \"likes\": 0,\n          \"color\": '#0f0'\n        },\n        { \n          \"id\": \"id2\",\n          \"name\": \"name2\",\n          \"val\": 1,\n          \"likes\": 0,\n          \"color\": '#0f0'\n        }\n    ],\n    \"links\": [\n        {\n            \"source\": \"id1\",\n            \"target\": \"id2\",\n            \"particles\": 2\n        }\n    ]\n}\n\nconst buildColoredTree = () => {\n    return data;\n}\n\nexport default buildColoredTree;","\nconst onNodeClick = (node: any, event: MouseEvent) => { \n\n    node.likes++;\n\n    setNodeColorByLikes(node);\n}\n\nconst setNodeColorByLikes = (node: any) => {\n    if(node.likes > 3 && 5 >= node.likes) \n        node.color = '#00f';\n    else if (node.likes > 5 && 7 >= node.likes) \n        node.color = '#ff0';\n    else if (node.likes > 7) \n        node.color = '#f00';\n}\n\nexport default onNodeClick;","import { ForceGraph2D } from \"react-force-graph\";\nimport buildColoredTree from \"../funcs/buildColoredTree\";\nimport onNodeClick from \"../funcs/onNodeClick\";\n\nconst ColoredGraph = (props: any) => {\n    return <ForceGraph2D \n        graphData={buildColoredTree()}\n        onNodeClick={onNodeClick}\n  />\n}\n\nexport default ColoredGraph;","import './App.css';\nimport BasicGraph from './components/basicGraph';\nimport ColoredGraph from './components/coloredGraph';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Roadmap CÃ³smico</h1>\n      <BasicGraph length={40}/>\n      <ColoredGraph />\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}