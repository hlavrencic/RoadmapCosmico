{"version":3,"sources":["components/formRowInput.tsx","components/nodeModal.tsx","funcs/setNodeColorByLikes.ts","containers/roadmap.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FormRowInput","props","label","type","required","placeholder","property","value","handleChange","Form","Group","controlId","Row","Col","className","Label","Control","formNoValidate","onChange","e","target","Feedback","NodeModal","formRef","useRef","show","onHide","isEdit","node","validated","onSubmit","errorMsg","Modal","centered","backdrop","keyboard","Header","closeButton","Title","name","Body","noValidate","ref","likes","Footer","Button","onClick","variant","current","setNodeColorByLikes","color","initialData","nodes","links","Roadmap","useState","data","setData","isNodeModalOpen","setIsNodeModalOpen","selectedNode","setSelectedNode","formHasError","setFormHasError","setErrorMsg","useEffect","getData","a","console","log","id","source","updateData","newNodes","map","n","forEach","openNodeModal","closeNodeModal","graphData","onNodeClick","event","preventDefault","onLinkClick","prop","form","checkValidity","JSON","stringify","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c7b00ab.chunk.js","sourcesContent":["import React from \"react\";\nimport { Col, Form, Row } from \"react-bootstrap\";\n\nconst FormRowInput = (props: any) => {\n    const { label, type, required, placeholder, property, value, handleChange} = props;\n    return (\n        <Form.Group controlId={property}>\n            <Row>\n                <Col className={'col-md-3'}>\n                    <Form.Label>{label}</Form.Label>\n                </Col>\n                <Col className={'col-md-9'}>\n                    <Form.Control\n                        formNoValidate\n                        type={type}\n                        required={required}\n                        placeholder={placeholder}\n                        value={value}\n                        onChange={(e) => handleChange(property,e.target.value)}\n                    />\n                    { required && (\n                        <Form.Control.Feedback type={\"invalid\"}>\n                            {label} es requerido\n                        </Form.Control.Feedback>\n                    )}\n                </Col>\n            </Row>\n        </Form.Group>\n    )\n}\n\nexport default FormRowInput;\n","import { useRef } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport FormRowInput from \"./formRowInput\";\n\nconst NodeModal = (props: any) => {\n    const formRef = useRef(null);\n    const { show, onHide, isEdit, onChange, node, validated, onSubmit, errorMsg } = props;\n\n    return (\n        <Modal\n            show={show}\n            onHide={onHide}\n            centered={true} //Centra el modal verticalmente en la pantalla\n            backdrop=\"static\" //Si se hace click fuera del modal este no se cerrara\n            keyboard={false}  //Si se presiona la tecla ESC tampoco se cierra\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>Nodo {node.name}</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form className={\"form\"} noValidate validated={validated} ref={formRef}>\n                    \n                    <FormRowInput\n                        label={'Likes'}\n                        type={'number'}\n                        required={true}\n                        placeholder={'Puntos del node'}\n                        property={'likes'}\n                        value={node.likes}\n                        handleChange={onChange}\n                    />\n\n                    {errorMsg !== '' &&\n                        <Form.Group className=\"alert-danger\">\n                            {errorMsg}\n                        </Form.Group>\n                    }\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"danger\">Cancelar</Button>\n                <Button onClick={(e)=> onSubmit(e,formRef.current, isEdit)} variant=\"success\">Actualizar</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default NodeModal;","import { GNode } from \"../entities/node\";\n\nconst setNodeColorByLikes = (node: GNode) => {\n    if(node.likes <= 3)\n        node.color = '#0f0';\n    if(node.likes > 3 && 5 >= node.likes) \n        node.color = '#00f';\n    else if (node.likes > 5 && 7 >= node.likes) \n        node.color = '#ff0';\n    else if (node.likes > 7) \n        node.color = '#f00';\n}\n\nexport default setNodeColorByLikes;","import { useEffect, useState } from \"react\"\nimport { ForceGraph2D } from \"react-force-graph\"\nimport NodeModal from \"../components/nodeModal\";\nimport { GLink } from \"../entities/link\";\nimport { GNode } from \"../entities/node\";\nimport setNodeColorByLikes from \"../funcs/setNodeColorByLikes\";\n\nconst initialData = {\n    nodes: [] as GNode[],\n    links: [] as GLink[]\n};\n\nconst Roadmap = (props: any) => {\n\n    const [data, setData] = useState(initialData);\n    const [isNodeModalOpen, setIsNodeModalOpen] = useState(false);\n    const [selectedNode, setSelectedNode] = useState({} as GNode);\n    const [formHasError, setFormHasError] = useState(false);\n    const [errorMsg, setErrorMsg] = useState('');\n\n    //OnInit\n    useEffect(() => {\n        getData();\n    }, []);\n\n    //API calls\n    const getData = async () => {\n        console.log(\"Obteniendo gData\");\n        setData({\n            nodes: [ \n                { \n                  id: \"id1\",\n                  name: \"name1\",\n                  likes: 0,\n                  color: '#0f0'\n                },\n                { \n                  id: \"id2\",\n                  name: \"name2\",\n                  likes: 0,\n                  color: '#0f0'\n                }\n            ],\n            links: [\n                {\n                    source: \"id1\",\n                    target: \"id2\"\n                }\n            ]\n        });\n    };\n    const updateData = async () => {\n        const newNodes = \n            data.nodes\n            .map((n: GNode) => n.id === selectedNode.id ? selectedNode : n)\n            .map((n: GNode) => { return { ...n }; });\n            \n        newNodes.forEach(n => setNodeColorByLikes(n));\n\n        setData({\n            nodes: newNodes, \n            links: [\n                {\n                    source: \"id1\",\n                    target: \"id2\"\n                }\n            ]\n        });\n    };\n\n    //Handlers\n    const onNodeClick = (node: any, event: MouseEvent) => {\n        console.log(\"Nodo clickeado\");\n        event.preventDefault();\n        openNodeModal(node);\n    };\n    const onLinkClick = () => {\n        console.log(\"Link clickeado\");\n    };\n\n    //Modal\n    const openNodeModal = (node: GNode) => {\n        setSelectedNode(node);\n        setIsNodeModalOpen(true);\n    };\n    const closeNodeModal = () => {\n        setIsNodeModalOpen(false);\n        setFormHasError(false);\n        setSelectedNode({} as GNode);\n        setErrorMsg('');\n    };\n    const submitNodeModal = (event: any, form: any) => {\n        event.preventDefault();\n        setFormHasError(true);\n\n        if(form.checkValidity()) {\n\n            console.log(JSON.stringify(selectedNode));\n            updateData();\n            closeNodeModal();\n        }\n    };\n    const changeInputNodeModal = (prop: any, value: any) => {\n        value === '' ? setFormHasError(true) : setFormHasError(false);\n\n        const node: GNode = {\n            ...selectedNode,\n            [prop]: value\n        };\n\n        setSelectedNode(node);\n    };\n\n    return (\n        <>\n            <ForceGraph2D \n                graphData={data}\n                onNodeClick={onNodeClick}\n                onLinkClick={onLinkClick}\n            />\n            <NodeModal \n                show={isNodeModalOpen}    \n                onHide={closeNodeModal}\n                onChange={changeInputNodeModal}\n                onSubmit={submitNodeModal}\n                node={selectedNode}\n                validated={formHasError}\n                errorMsg={errorMsg}\n            />\n        </>\n    );\n}\n\nexport default Roadmap; ","import './App.css';\n// import BasicGraph from './components/basicGraph';\n// import ColoredGraph from './components/coloredGraph';\nimport Roadmap from './containers/roadmap';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Roadmap Cósmico</h1>\n      <Roadmap />\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}