{"version":3,"sources":["buildRandomTree.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["buildRandomTree","n","nodes","Array","keys","map","i","id","name","links","filter","source","target","Math","round","random","App","className","graphData","nodeAutoColorBy","linkDirectionalArrowLength","linkDirectionalArrowRelPos","linkCurvature","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAYeA,EAZS,SAACC,GACrB,MAAO,CACHC,MAAO,YAAIC,MAAMF,GAAGG,QAAQC,KAAI,SAAAC,GAAC,MAAK,CAAEC,GAAID,EAAGE,KAAM,QAAUF,MAC/DG,MAAO,YAAIN,MAAMF,GAAGG,QACnBM,QAAO,SAAAH,GAAE,OAAIA,KACbF,KAAI,SAAAE,GAAE,MAAK,CACZI,OAAQJ,EACRK,OAAQC,KAAKC,MAAMD,KAAKE,UAAYR,EAAG,U,QCchCS,MAhBf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,uCACA,cAAC,IAAD,CACIC,UAAWlB,EAAgB,IAC3BmB,gBAAgB,QAChBC,2BAA4B,IAC5BC,2BAA4B,EAC5BC,cAAe,UCAVC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2214d9fb.chunk.js","sourcesContent":["const buildRandomTree = (n) => {\n    return {\n        nodes: [...Array(n).keys()].map(i => ({ id: i, name: 'Nodo ' + i })),\n        links: [...Array(n).keys()]\n        .filter(id => id)\n        .map(id => ({\n        source: id,\n        target: Math.round(Math.random() * (id-1))\n        }))\n    };\n}\n\nexport default buildRandomTree;","import { ForceGraph2D } from 'react-force-graph';\n\nimport './App.css';\nimport buildRandomTree from './buildRandomTree.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>React</h1>\n      <ForceGraph2D \n          graphData={buildRandomTree(40)}\n          nodeAutoColorBy=\"group\"\n          linkDirectionalArrowLength={3.5}\n          linkDirectionalArrowRelPos={1}\n          linkCurvature={0.25}\n\n        />\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}